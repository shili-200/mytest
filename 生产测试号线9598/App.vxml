<?xml version="1.0" encoding ="UTF-8"?>
<!DOCTYPE vxml PUBLIC "-//W3C//DTD VOICEXML 2.1//EN" "http://www.w3.org/TR/voicexml21/vxml.dtd">
<vxml version="2.1" xmlns:xsi="http://www/w3/org/2001/vxml" xsi:schemaLocation="http://www.w3.org/TR/voicexml21/vxml.xsd">

	<var name="sysANI" expr=""/>
	<var name="sysDNIS" expr=""/>
  <var name="sysCallID" expr=""/>
  <var name="sysCallRefID" expr=""/>
	<var name="sysHungupXML" expr=""/>
	<var name="sysCTIContactID" expr=""/>
	<var name="sysCTIGetDataCount" expr="0"/>
	<var name="sysCTIGetRouteResultCount" expr="0"/>
	<var name="sysExtenNum" expr=""/>
	<var name="sysChannelID" expr=""/>
	<var name="InterfaceUrlQD" expr="'http://114.115.179.177:36666/'"/>
	<var name="pathHead" expr="'https://t-12368hotline.aegis-info.com/imtpage/'"/>
	<var name="InterfaceUrl" expr="'http://192.168.10.113:20111/'"/>
	<var name="BigZone1" expr="'1'"/>
	<var name="CheckPswIVR1" expr="'CurrencyVerification.jsp'"/>
	<var name="PathHead1" expr="''"/>
	<var name="IfDigitLog1" expr="'8'"/>
	<var name="DefaultCityCode1" expr="''"/>
	<var name="MemLanguageFlag1" expr="'30'"/>
	<var name="RouteFlag1" expr="'0'"/>
	<var name="IVRAnalysisFlag1" expr="''"/>
	<var name="noinput" expr="'1V_34.wav'"/>
	<var name="inputError" expr="'1V_37.wav'"/>
	<var name="input3Error" expr="'1V_36.wav'"/>
	<var name="systemError" expr="'1V_35.wav'"/>
	
	
	

	<script> <![CDATA[				
		//字符串操作1：取长度
        function BaseStrLen(strValue)
        {
        	var strRes = "";
			strRes = strValue.length;
			return strRes;     	
		}
				
		//字符串操作2：取部分字符
		function BaseStrSub(strValue,nBegin,nLen)
        {
        	var strRes = "";
			strRes = strValue.substr(nBegin, nLen);
			return strRes;     	       	
        }
        
        //字符串操作3：GetLeft
        function BaseStrLeft(strValue,nLen)
        {
        	var strRes = "";
			strRes = strValue.substr(0, nLen);
			return strRes;     	      	
        }
        
        //字符串操作4：GetRight
        function BaseStrRight(strValue,nLen)
        {
        	var strRes = "";
        	var nBegin = strValue.length-nLen;
			strRes = strValue.substr(nBegin, strValue.length);
			return strRes;
		}
		
		//用*替换信用卡里的部分卡号
		function ReplaceCardNO(strValue)
		{
			var strRes = "";
			var strTmp1 = "";
			var strTmp2 = "";
			strTmp1 = BaseStrLeft(strValue,4);
			strTmp2 = BaseStrRight(strValue,4);
			strRes = strTmp1 + "********";
			strRes = strRes + strTmp2;
			return strRes;
		}
		
		//检查信用卡卡号里是否包含非法字符
		function checkformat(strValue)
		{
			var strRes = 0;
			var strChecked = "*";
			strRes = BaseStrFind(strValue,strChecked);
	        if (strRes == -1)
			{
				return strValue;
			}
			
			return "-1";
			
		}
		
		
		//判断两个时间相差几个月
		function  IsSixMonth(timeBegin,timeEnd)
        {
            var nBegin = "";
        	var nEnd = "";
        	var mBegin = "";
        	var mEnd = "";
        	
        	var result;
        	
            nBegin = timeBegin.substr(0,4);
        	nEnd = timeEnd.substr(0,4);
        	mBegin = timeBegin.substr(5,2);
        	mEnd = timeEnd.substr(5,2);
        	
        	result = (parseInt(nEnd,10) - parseInt(nBegin,10))*12 + (parseInt(mEnd,10) - parseInt(mBegin,10));
        	return result;
        }
		
		
		//验证信用卡日期格式是否有效
		function CheckBankDate(bankdate)
		{
			var strRes = "0";
			var strYear = "";
			var strMonth = "";
			var strNDate = "";
			var strNYear = "";
			var strNMonth = "";
			
			if (bankdate.length <4)
			{
				strRes = "1";
				return strRes;
			}
			
			strYear = BaseStrRight(bankdate,2);
			strMonth = BaseStrLeft(bankdate,2);
			strNDate = BaseGetDate();
			strNYear = BaseStrSub(strNDate,2,2);
			strNMonth = BaseStrSub(strNDate,5,2);
			
			
			if(strMonth>12)
			{
				strRes = "2";
				return strRes;
			}
			
			if(strMonth<1)
			{
				strRes = "3";
				return strRes;
			}
			
			if(strYear < strNYear)
			{
				strRes = "4";
				return strRes;
			}
			
			if(strYear == strNYear)
			{
			
				
			   if(strMonth < strNMonth)
			   {
				   strRes = "5";
				   return strRes;
			   }
			}
			

			
			return strRes;
			
		}
		
		 function ReturnOfferVoice(offerCode)
         {
            var resVoice;
	                	
           switch(offerCode)
           {
               case '20090720':
                   resVoice = "GPRS004.wav";
                   break;
               case '20090721':
                   resVoice = "GPRS005.wav";
                   break;
               case '20090722':
                   resVoice = "GPRS006.wav";
                   break;
               case '20140607':
                   resVoice = "2017080473.wav";
                   break;
               case '20140608':
                   resVoice = "2017080474.wav";
                   break;
               case '20140609':
                   resVoice = "2017080475.wav";
                   break;
               case '20140610':
                   resVoice = "2017080476.wav";
                   break;
               default:
                   resVoice = "welcome.wav";
                   break;
           }
       
           return resVoice;
       }
	
        
        //字符串操作5：strcat
        function BaseStrCat(strValue,strNew)
        {
        	var strRes = "";
			strRes = strValue + strNew;   
			return strRes;     	    	
        }
        
        //字符串操作6：Find
        function BaseStrFind(strValue,strNew)
        {
        	var nRes = 0;
			nRes = strValue.indexOf(strNew,0);
			return nRes;     	
        }
        
        //字符串操作7：Replace
        function BaseStrReplace(strValue,strOld,strNew)
        {
        	var strRes = "";
			strRes = strValue.replace(strOld, strNew);  
			return strRes;     	
        }
        
        //整型操作
        function BaseInteger(nOperate,nNum1,nNum2)
        {
        	var nRes;
        	switch(nOperate)
        	{
        	case 0:
        		nRes = parseInt(nNum1,10) + parseInt(nNum2,10);
        		break;
        	case 1:
        		nRes = parseInt(nNum1,10) - parseInt(nNum2,10);
        		break;
        	case 2:
        		nRes = parseInt(nNum1,10) * parseInt(nNum2,10);
        		break;
        	case 3:
        		nRes = parseInt(nNum1,10) / parseInt(nNum2,10);
        		break;
        	case 4:
        		nRes = parseInt(nNum1,10) % parseInt(nNum2,10);
        		break;
        	}
     		return nRes;     	
        }
        
        //浮点型操作
        function BaseFloat(nOperate,nNum1,nNum2)
        {
        	var nRes;
        	switch(nOperate)
        	{
        	case 0:
        		nRes = parseFloat(nNum1) + parseFloat(nNum2);
        		break;
        	case 1:
        		nRes = parseFloat(nNum1) - parseFloat(nNum2);
        		break;
        	case 2:
        		nRes = parseFloat(nNum1) * parseFloat(nNum2);
        		break;
        	case 3:
        		nRes = parseFloat(nNum1) / parseFloat(nNum2);
        		break;
        	case 4:
        		nRes = parseFloat(nNum1) % parseFloat(nNum2);
        		break;
        	}
     		return nRes;     	
        }
        
        //取当前日期
        function BaseGetDate()
        {
        	var dtRes = new Date;
			var strRes = "";  
			var c = "-";
			strRes = dtRes.getFullYear() + c; 
			if ((dtRes.getMonth() + 1) < 10)
				strRes += "0" + (dtRes.getMonth() + 1) + c;
			else
				strRes += dtRes.getMonth() + 1 + c;
			if (dtRes.getDate() < 10)
				strRes += "0" + dtRes.getDate();
			else
				strRes += dtRes.getDate();       
        	return strRes; 	
        }
        
         //取当前时间
        function BaseGetTime()
        {
        	var dtRes = new Date;
			var strRes = "";      
			var c = ":";
			if (dtRes.getHours() < 10)
				strRes += "0" + dtRes.getHours() + c;
			else
				strRes += dtRes.getHours() + c;
			if (dtRes.getMinutes() < 10)
				strRes += "0" + dtRes.getMinutes()+ c;
			else
				strRes += dtRes.getMinutes()+ c;
			if (dtRes.getSeconds() < 10)
				strRes += "0" + dtRes.getSeconds();
			else
				strRes += dtRes.getSeconds();   
        	return strRes; 	
        }
        
		//取随路数据字段（对取出的随路数据进行解析）by wugb 20170625
        function GetRoutingDataVal(strValue,nVal)
        {
		    var a = new Array();
			a = strValue.split("|");
	        return a[nVal];	  	
		}
		
		//获取当前日期的前六个月之前的日期  by wugb 20170705
		function GetSixMonthDate()
		{	
			var strRes = "";
			var c = "-";
            var dtRes = new Date();
            var year = dtRes.getFullYear();
            var mon = dtRes.getMonth()+1;
            var day = dtRes.getDate();
            if(mon <= 6){
                    mon = mon + 6;
					year = year - 1;
                        }
            if(mon > 6){
                    mon = mon-6;
                       }
			strRes = year + c;
            if ( mon < 10)
				strRes += "0" + mon + c;
			else
				strRes += mon + c;
			if (day < 10)
				strRes += "0" + day;
			else
				strRes += day;  
			strRes += " ";  
            return strRes;			
        }
		
		//取当前时间（全时间）by wugb  20170625
		function BaseGetDateTimeNew()
        {
        	var dtRes = new Date;
			var strRes = "";
		//	strRes = dtRes.toLocaleString();
		//	strRes = dtRes.toGMTString();
			var c = "-";
			strRes = dtRes.getFullYear() ; 
			if ((dtRes.getMonth() + 1) < 10)
				strRes += "0" + (dtRes.getMonth() + 1) ;
			else
				strRes += dtRes.getMonth() + 1 ;
			if (dtRes.getDate() < 10)
				strRes += "0" + dtRes.getDate();
			else
				strRes += dtRes.getDate();  
			
			strRes += "";
			
			c = ":";
			if (dtRes.getHours() < 10)
				strRes += "0" + dtRes.getHours() ;
			else
				strRes += dtRes.getHours() ;
			if (dtRes.getMinutes() < 10)
				strRes += "0" + dtRes.getMinutes();
			else
				strRes += dtRes.getMinutes();
			if (dtRes.getSeconds() < 10)
				strRes += "0" + dtRes.getSeconds();
			else 
			    strRes += dtRes.getSeconds() ;
			if (dtRes.getMilliseconds() < 10)
				strRes += "00" + dtRes.getMilliseconds();
			else if (dtRes.getMilliseconds() < 100)
				strRes += "0" + dtRes.getMilliseconds();
			else
				strRes += dtRes.getMilliseconds();
        	return strRes; 	
        }
        //取当前日期
        function BaseGetDateTime()
        {
        	var dtRes = new Date;
			var strRes = "";
		//	strRes = dtRes.toLocaleString();
		//	strRes = dtRes.toGMTString();
			var c = "-";
			strRes = dtRes.getFullYear() + c; 
			if ((dtRes.getMonth() + 1) < 10)
				strRes += "0" + (dtRes.getMonth() + 1) + c;
			else
				strRes += dtRes.getMonth() + 1 + c;
			if (dtRes.getDate() < 10)
				strRes += "0" + dtRes.getDate();
			else
				strRes += dtRes.getDate();  
			
			strRes += " ";
			
			c = ":";
			if (dtRes.getHours() < 10)
				strRes += "0" + dtRes.getHours() + c;
			else
				strRes += dtRes.getHours() + c;
			if (dtRes.getMinutes() < 10)
				strRes += "0" + dtRes.getMinutes()+ c;
			else
				strRes += dtRes.getMinutes()+ c;
			if (dtRes.getSeconds() < 10)
				strRes += "0" + dtRes.getSeconds();
			else
				strRes += dtRes.getSeconds();
        	return strRes; 	
        }
        
        //取当前日期
        function BaseGetDateTimeEx()
        {
        	var dtRes = new Date;
			var strRes = "";
		//	strRes = dtRes.toLocaleString();
		//	strRes = dtRes.toGMTString();
			var c = "-";
			strRes = dtRes.getFullYear() + c; 
			if ((dtRes.getMonth() + 1) < 10)
				strRes += "0" + (dtRes.getMonth() + 1) + c;
			else
				strRes += dtRes.getMonth() + 1 + c;
			if (dtRes.getDate() < 10)
				strRes += "0" + dtRes.getDate();
			else
				strRes += dtRes.getDate();  
			
			strRes += " ";
			
			c = ":";
			if (dtRes.getHours() < 10)
				strRes += "0" + dtRes.getHours() + c;
			else
				strRes += dtRes.getHours() + c;
			if (dtRes.getMinutes() < 10)
				strRes += "0" + dtRes.getMinutes()+ c;
			else
				strRes += dtRes.getMinutes()+ c;
			if (dtRes.getSeconds() < 10)
				strRes += "0" + dtRes.getSeconds();
			else
				strRes += dtRes.getSeconds();
			strRes += ".";
			if (dtRes.getMilliseconds() < 10)
				strRes += "00" + dtRes.getMilliseconds();
			else if (dtRes.getMilliseconds() < 100 && dtRes.getMilliseconds() >= 10)
				strRes += "0" + dtRes.getMilliseconds();
			else
				strRes += dtRes.getMilliseconds();
				
        	return strRes; 
        }
        
        //时间操作.strDate格式为 2009-11-11 10:10:10
        function BaseDateDeal(nOperate,strDate,nNum)
        {
        	var dtRes = new Date;
       		var strRes = "2009-11-11 10:10:10";
        	var nYear,nMonth=0,nDate=0,nHours=0,nMinutes=0,nSeconds=0;
        	nYear = parseInt(strDate.substr(0, 4),10);
        	nMonth = parseInt(strDate.substr(5, 2)-1,10);
        	nDate = parseInt(strDate.substr(8, 2),10);
        	nHours = parseInt(strDate.substr(11, 2),10);
        	nMinutes = parseInt(strDate.substr(14, 2),10);
        	nSeconds = parseInt(strDate.substr(17, 2),10);
        		
        	dtRes.setFullYear(nYear,nMonth,nDate);
        	dtRes.setHours(nHours,nMinutes,nSeconds);
        	
        	switch(nOperate)
        	{
        	case 1://加X天
        		dtRes.setDate(nDate + parseInt(nNum,10));
        		break;
        	case 2://加X小时
        		nHours = nHours + parseInt(nNum,10);
        		dtRes.setHours(nHours);
      //  		dtRes.setHours(nHours,nMinutes,nSeconds);
        		break;
        	case 3://加X分钟
        		dtRes.setMinutes(nMinutes + parseInt(nNum,10));
        		break;
        	case 4://加X秒钟
        		dtRes.setSeconds(nSeconds + parseInt(nNum,10));
        		break;
        	case 5://减X天
        		dtRes.setDate(nDate - parseInt(nNum,10));
        		break;
        	case 6://减X小时
        		nHours = nHours - parseInt(nNum,10);
        		dtRes.setHours(nHours);
        		break;
        	case 7://减X分钟
        		dtRes.setMinutes(nMinutes - parseInt(nNum,10));
        		break;
        	case 8://减X秒钟
        		dtRes.setSeconds(nSeconds - parseInt(nNum,10));
        		break;
        	}
        		
        	
        	var c = "-";
			strRes = dtRes.getFullYear() + c; 
			if ((dtRes.getMonth() + 1) < 10)
				strRes += "0" + (dtRes.getMonth() + 1) + c;
			else
				strRes += dtRes.getMonth() + 1 + c;
			if (dtRes.getDate() < 10)
				strRes += "0" + dtRes.getDate();
			else
				strRes += dtRes.getDate();  
			
			strRes += " ";
			
			c = ":";
			if (dtRes.getHours() < 10)
				strRes += "0" + dtRes.getHours() + c;
			else
				strRes += dtRes.getHours() + c;
			if (dtRes.getMinutes() < 10)
				strRes += "0" + dtRes.getMinutes()+ c;
			else
				strRes += dtRes.getMinutes()+ c;
			if (dtRes.getSeconds() < 10)
				strRes += "0" + dtRes.getSeconds();
			else
				strRes += dtRes.getSeconds(); 
				
        	return strRes;
        }
        
        //时间操作 strDate格式为 2009-11-11 10:10:10
        function BaseDateGet(nOperate,strDate)
        {
        	var dtRes = new Date;
			var strRes = "";
			var WeekArr = new Array("星期日", "星期一", "星期二","星期三","星期四", "星期五","星期六");
	    	    
			if (strDate != '')
			{	
	        	var nYear,nMonth=0,nDate=0,nHours=0,nMinutes=0,nSeconds=0;
	        	nYear = parseInt(strDate.substr(0, 4),10);
	        	nMonth = parseInt(strDate.substr(5, 2)-1,10);
	        	nDate = parseInt(strDate.substr(8, 2),10);
	        	nHours = parseInt(strDate.substr(11, 2),10);
	        	nMinutes = parseInt(strDate.substr(14, 2),10);
	        	nSeconds = parseInt(strDate.substr(17, 2),10);
	        	
	        	dtRes.setFullYear(nYear,nMonth,nDate);
	        	dtRes.setHours(nHours,nMinutes,nSeconds);
        	}
        	
        	switch(nOperate)
        	{
        	case 1://取得操作变量中的年
        		strRes = dtRes.getFullYear();
        		break;
        	case 2://取得操作变量中的月
        		strRes = dtRes.getMonth()+1;
        		break;
        	case 3://取得操作变量中的日
        		strRes = dtRes.getDate();
        		break;
        	case 4://取得操作变量中的小时
        		strRes = dtRes.getHours();
        		break;
        	case 5://取得操作变量中的分钟
        		strRes = dtRes.getMinutes();
        		break;
        	case 6://取得操作变量中的秒
        		strRes = dtRes.getSeconds();
        		break;
        	case 7://取得操作变量中的星期几
        		strRes = WeekArr[dtRes.getDay()];
        		//dtRes.getDay();
        		break;
        	case 8://取得操作变量中的星期几
        		strRes = dtRes.getDay();
        		break;
        	}
			return strRes;     	
        }
        
        //时间相减.strDate格式为 2009-11-11 10:10:10
        function BaseDateSub(strBeginDate,strEndDate,nOperate)
        {
        	var dtBegin = new Date;
        	var dtEnd = new Date;
       		var nRes = 0, nMil = 1;
        	var nYear,nMonth=0,nDate=0,nHours=0,nMinutes=0,nSeconds=0;
        	
        	nYear = parseInt(strBeginDate.substr(0, 4),10);
        	nMonth = parseInt(strBeginDate.substr(5, 2)-1,10);
        	nDate = parseInt(strBeginDate.substr(8, 2),10);
        	nHours = parseInt(strBeginDate.substr(11, 2),10);
        	nMinutes = parseInt(strBeginDate.substr(14, 2),10);
        	nSeconds = parseInt(strBeginDate.substr(17, 2),10);
        	dtBegin.setFullYear(nYear,nMonth,nDate);
        	dtBegin.setHours(nHours,nMinutes,nSeconds);
        	
        	nYear = parseInt(strEndDate.substr(0, 4),10);
        	nMonth = parseInt(strEndDate.substr(5, 2)-1,10);
        	nDate = parseInt(strEndDate.substr(8, 2),10);
        	nHours = parseInt(strEndDate.substr(11, 2),10);
        	nMinutes = parseInt(strEndDate.substr(14, 2),10);
        	nSeconds = parseInt(strEndDate.substr(17, 2),10);        		
        	dtEnd.setFullYear(nYear,nMonth,nDate);
        	dtEnd.setHours(nHours,nMinutes,nSeconds);
        	
        	switch(nOperate)
        	{
        	case 0://毫秒
        		nMil = 1;
        		break;
        	case 1://秒
        		nMil = 1000;
        		break;
        	case 2://分
        		nMil = 1000 * 60;
        		break;
        	case 3://天
        		nMil = 1000 * 60 * 24;
        		break;
        	
        	}
        	nRes = parseInt((dtEnd.getTime() - dtBegin.getTime()) / nMil,10);				
        	return nRes;
        }
        
        //取随机数
        function BaseRandom(nBegin,nEnd)
        {
        	var nRes = 0;
        	if (parseInt(nEnd,10) >= parseInt(nBegin,10))
	        	nRes = parseInt(nBegin,10) + (parseInt(nEnd,10)-parseInt(nBegin,10)) * Math.random();
        	return parseInt(nRes,10);
        }
        
        //Atoi
        function BaseAtoi(strValue) 
        {
			var nRes = parseInt(strValue,10);
        	return nRes;
        }	
        
        //Atof
        function BaseAtof(strValue) 
        {
			var fRes = parseFloat(strValue);
        	return fRes;
        }
        
        
        //字符中间+空格
        function getString(strValue)
        {
        	var strRes="",strTmp="";
        	var j = strValue.length;
       		for(var i=0;i<j;i++){
        		strTmp = strValue.charAt(i)+" ";
         		strRes = strRes + strTmp;
        	}
        	return strRes;
				}
				
				//将字符串查出来转换成json对象
				function BaseDataToJson(strValue)
		    {    		
    				var obj=eval('('+BaseStrRight(strValue,BaseStrLen(strValue)-BaseStrFind(strValue,'{'))+')');
		        return obj;
				}
								
				function BaseDataToJson2(strValue)
		    {    		
    				var obj=eval('('+strValue+')');
		        return obj;
				}
				function md5(sourceStr){
					var hex_chr = '0123456789ABCDEF';
					function rhex(num)
					{
					  var str = '';
					  var j =0;
					  for(j = 0; j <= 3; j++) {
					    str += hex_chr.charAt((num >> (j * 8 + 4)) & 0x0F) + hex_chr.charAt((num >> (j * 8)) & 0x0F);
					  }
					  return str;
					}


					function str2blks_MD5(str)
					{
					  var nblk = ((str.length + 8) >> 6) + 1;
					  var blks = new Array(nblk * 16);
					  var i=0;
					  for(i = 0; i < nblk * 16; i++) {
					  	blks[i] = 0;
					  }
					  for(i = 0; i < str.length; i++) {
					    blks[i >> 2] |= str.charCodeAt(i) << ((i % 4) * 8);
					  }
					  blks[i >> 2] |= 0x80 << ((i % 4) * 8);
					  blks[nblk * 16 - 2] = str.length * 8;
					  return blks;
					}

					function add(x, y)
					{
					  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
					  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
					  return (msw << 16) | (lsw & 0xFFFF);
					}


					function rol(num, cnt)
					{
					  return (num << cnt) | (num >>> (32 - cnt));
					}


					function cmn(q, a, b, x, s, t)
					{
					  return add(rol(add(add(a, q), add(x, t)), s), b);
					}
					function ff(a, b, c, d, x, s, t)
					{
					  return cmn((b & c) | ((~b) & d), a, b, x, s, t);
					}
					function gg(a, b, c, d, x, s, t)
					{
					  return cmn((b & d) | (c & (~d)), a, b, x, s, t);
					}
					function hh(a, b, c, d, x, s, t)
					{
					  return cmn(b ^ c ^ d, a, b, x, s, t);
					}
					function ii(a, b, c, d, x, s, t)
					{
					  return cmn(c ^ (b | (~d)), a, b, x, s, t);
					}
					
					
				   


					function calcMD5(str)
					{
					  var x = str2blks_MD5(str);
					  var a =  1732584193;
					  var b = -271733879;
					  var c = -1732584194;
					  var d =  271733878;

					  for(var i = 0; i < x.length; i += 16)
					  {
					    var olda = a;
					    var oldb = b;
					    var oldc = c;
					    var oldd = d;

					    a = ff(a, b, c, d, x[i+ 0], 7 , -680876936);
					    d = ff(d, a, b, c, x[i+ 1], 12, -389564586);
					    c = ff(c, d, a, b, x[i+ 2], 17,  606105819);
					    b = ff(b, c, d, a, x[i+ 3], 22, -1044525330);
					    a = ff(a, b, c, d, x[i+ 4], 7 , -176418897);
					    d = ff(d, a, b, c, x[i+ 5], 12,  1200080426);
					    c = ff(c, d, a, b, x[i+ 6], 17, -1473231341);
					    b = ff(b, c, d, a, x[i+ 7], 22, -45705983);
					    a = ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
					    d = ff(d, a, b, c, x[i+ 9], 12, -1958414417);
					    c = ff(c, d, a, b, x[i+10], 17, -42063);
					    b = ff(b, c, d, a, x[i+11], 22, -1990404162);
					    a = ff(a, b, c, d, x[i+12], 7 ,  1804603682);
					    d = ff(d, a, b, c, x[i+13], 12, -40341101);
					    c = ff(c, d, a, b, x[i+14], 17, -1502002290);
					    b = ff(b, c, d, a, x[i+15], 22,  1236535329);    

					    a = gg(a, b, c, d, x[i+ 1], 5 , -165796510);
					    d = gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
					    c = gg(c, d, a, b, x[i+11], 14,  643717713);
					    b = gg(b, c, d, a, x[i+ 0], 20, -373897302);
					    a = gg(a, b, c, d, x[i+ 5], 5 , -701558691);
					    d = gg(d, a, b, c, x[i+10], 9 ,  38016083);
					    c = gg(c, d, a, b, x[i+15], 14, -660478335);
					    b = gg(b, c, d, a, x[i+ 4], 20, -405537848);
					    a = gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
					    d = gg(d, a, b, c, x[i+14], 9 , -1019803690);
					    c = gg(c, d, a, b, x[i+ 3], 14, -187363961);
					    b = gg(b, c, d, a, x[i+ 8], 20,  1163531501);
					    a = gg(a, b, c, d, x[i+13], 5 , -1444681467);
					    d = gg(d, a, b, c, x[i+ 2], 9 , -51403784);
					    c = gg(c, d, a, b, x[i+ 7], 14,  1735328473);
					    b = gg(b, c, d, a, x[i+12], 20, -1926607734);
					    
					    a = hh(a, b, c, d, x[i+ 5], 4 , -378558);
					    d = hh(d, a, b, c, x[i+ 8], 11, -2022574463);
					    c = hh(c, d, a, b, x[i+11], 16,  1839030562);
					    b = hh(b, c, d, a, x[i+14], 23, -35309556);
					    a = hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
					    d = hh(d, a, b, c, x[i+ 4], 11,  1272893353);
					    c = hh(c, d, a, b, x[i+ 7], 16, -155497632);
					    b = hh(b, c, d, a, x[i+10], 23, -1094730640);
					    a = hh(a, b, c, d, x[i+13], 4 ,  681279174);
					    d = hh(d, a, b, c, x[i+ 0], 11, -358537222);
					    c = hh(c, d, a, b, x[i+ 3], 16, -722521979);
					    b = hh(b, c, d, a, x[i+ 6], 23,  76029189);
					    a = hh(a, b, c, d, x[i+ 9], 4 , -640364487);
					    d = hh(d, a, b, c, x[i+12], 11, -421815835);
					    c = hh(c, d, a, b, x[i+15], 16,  530742520);
					    b = hh(b, c, d, a, x[i+ 2], 23, -995338651);

					    a = ii(a, b, c, d, x[i+ 0], 6 , -198630844);
					    d = ii(d, a, b, c, x[i+ 7], 10,  1126891415);
					    c = ii(c, d, a, b, x[i+14], 15, -1416354905);
					    b = ii(b, c, d, a, x[i+ 5], 21, -57434055);
					    a = ii(a, b, c, d, x[i+12], 6 ,  1700485571);
					    d = ii(d, a, b, c, x[i+ 3], 10, -1894986606);
					    c = ii(c, d, a, b, x[i+10], 15, -1051523);
					    b = ii(b, c, d, a, x[i+ 1], 21, -2054922799);
					    a = ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
					    d = ii(d, a, b, c, x[i+15], 10, -30611744);
					    c = ii(c, d, a, b, x[i+ 6], 15, -1560198380);
					    b = ii(b, c, d, a, x[i+13], 21,  1309151649);
					    a = ii(a, b, c, d, x[i+ 4], 6 , -145523070);
					    d = ii(d, a, b, c, x[i+11], 10, -1120210379);
					    c = ii(c, d, a, b, x[i+ 2], 15,  718787259);
					    b = ii(b, c, d, a, x[i+ 9], 21, -343485551);

					    a = add(a, olda);
					    b = add(b, oldb);
					    c = add(c, oldc);
					    d = add(d, oldd);
					  }
					  return rhex(a) + rhex(b) + rhex(c) + rhex(d);
					}
					return calcMD5(sourceStr);
				}
				function sha1(msg) {
			  
			    function rotate_left(n,s) {
			        var t4 = ( n<<s ) | (n>>>(32-s));
			        return t4;
			    };
			  
			    function lsb_hex(val) {
			        var str="";
			        var i;
			        var vh;
			        var vl;
			        for( i=0; i<=6; i+=2 ) {
			            vh = (val>>>(i*4+4))&0x0f;
			            vl = (val>>>(i*4))&0x0f;
			            str += vh.toString(16) + vl.toString(16);
			        }
			        return str;
			    };
			  
			    function cvt_hex(val) {
			        var str="";
			        var i;
			        var v;
			        for( i=7; i>=0; i-- ) {
			            v = (val>>>(i*4))&0x0f;
			            str += v.toString(16);
			        }
			        return str;
			    };
			  
			    function Utf8Encode(string) {
			        string = string.replace(/\r\n/g,"\n");
			        var utftext = "";
			        var n = 0;
			        for (n = 0; n < string.length; n++) {
			            var c = string.charCodeAt(n);
			            if (c < 128) {
			                utftext += String.fromCharCode(c);
			            }
			            else if((c > 127) && (c < 2048)) {
			                utftext += String.fromCharCode((c >> 6) | 192);
			                utftext += String.fromCharCode((c & 63) | 128);
			            }
			            else {
			                utftext += String.fromCharCode((c >> 12) | 224);
			                utftext += String.fromCharCode(((c >> 6) & 63) | 128);
			                utftext += String.fromCharCode((c & 63) | 128);
			            }
			        }
			        return utftext;
			    };
			  
			    var blockstart;
			    var i, j;
			    var W = new Array(80);
			    var H0 = 0x67452301;
			    var H1 = 0xEFCDAB89;
			    var H2 = 0x98BADCFE;
			    var H3 = 0x10325476;
			    var H4 = 0xC3D2E1F0;
			    var A, B, C, D, E;
			    var temp;
			  
			    msg = Utf8Encode(msg);
			  
			    var msg_len = msg.length;
			  
			    var word_array = new Array();
			    for( i=0; i<msg_len-3; i+=4 ) {
			        j = msg.charCodeAt(i)<<24 | msg.charCodeAt(i+1)<<16 |
			        msg.charCodeAt(i+2)<<8 | msg.charCodeAt(i+3);
			        word_array.push( j );
			    }
			  
			    switch( msg_len % 4 ) {
			        case 0:
			            i = 0x080000000;
			        break;
			        case 1:
			            i = msg.charCodeAt(msg_len-1)<<24 | 0x0800000;
			        break;
			  
			        case 2:
			            i = msg.charCodeAt(msg_len-2)<<24 | msg.charCodeAt(msg_len-1)<<16 | 0x08000;
			        break;
			  
			        case 3:
			            i = msg.charCodeAt(msg_len-3)<<24 | msg.charCodeAt(msg_len-2)<<16 | msg.charCodeAt(msg_len-1)<<8  | 0x80;
			        break;
			    }
			  
			    word_array.push( i );
			  
			    while( (word_array.length % 16) != 14 ) {
			    	word_array.push( 0 );
			    }
			  
			    word_array.push( msg_len>>>29 );
			    word_array.push( (msg_len<<3)&0x0ffffffff );
			  
			    for ( blockstart=0; blockstart<word_array.length; blockstart+=16 ) {
			  
			        for( i=0; i<16; i++ ) {
			        	W[i] = word_array[blockstart+i];
			        }
			        for( i=16; i<=79; i++ ) {
			        	W[i] = rotate_left(W[i-3] ^ W[i-8] ^ W[i-14] ^ W[i-16], 1);
			        }
			  
			        A = H0;
			        B = H1;
			        C = H2;
			        D = H3;
			        E = H4;
			  
			        for( i= 0; i<=19; i++ ) {
			            temp = (rotate_left(A,5) + ((B&C) | (~B&D)) + E + W[i] + 0x5A827999) & 0x0ffffffff;
			            E = D;
			            D = C;
			            C = rotate_left(B,30);
			            B = A;
			            A = temp;
			        }
			  
			        for( i=20; i<=39; i++ ) {
			            temp = (rotate_left(A,5) + (B ^ C ^ D) + E + W[i] + 0x6ED9EBA1) & 0x0ffffffff;
			            E = D;
			            D = C;
			            C = rotate_left(B,30);
			            B = A;
			            A = temp;
			        }
			  
			        for( i=40; i<=59; i++ ) {
			            temp = (rotate_left(A,5) + ((B&C) | (B&D) | (C&D)) + E + W[i] + 0x8F1BBCDC) & 0x0ffffffff;
			            E = D;
			            D = C;
			            C = rotate_left(B,30);
			            B = A;
			            A = temp;
			        }
			  
			        for( i=60; i<=79; i++ ) {
			            temp = (rotate_left(A,5) + (B ^ C ^ D) + E + W[i] + 0xCA62C1D6) & 0x0ffffffff;
			            E = D;
			            D = C;
			            C = rotate_left(B,30);
			            B = A;
			            A = temp;
			        }
			  
			        H0 = (H0 + A) & 0x0ffffffff;
			        H1 = (H1 + B) & 0x0ffffffff;
			        H2 = (H2 + C) & 0x0ffffffff;
			        H3 = (H3 + D) & 0x0ffffffff;
			        H4 = (H4 + E) & 0x0ffffffff;
			  
			    }
			  
			    var sha1Msg = cvt_hex(H0) + cvt_hex(H1) + cvt_hex(H2) + cvt_hex(H3) + cvt_hex(H4);
			  
			    return sha1Msg.toUpperCase();
			 }
			 function urlEncoder(value){
			 	 return encodeURIComponent(value);
			 }
			 
			 //输入参数：随路数据字符串、数据分隔符、获取的序号(从0开始)，返回值：需要对应的值
				function BaseGetCallData(strCallData,strSplit,nIndex)
		    {    		
    				var arr=strCallData.split(strSplit);
    				if (nIndex >= arr.length)
    					return '';
		        return arr[nIndex];
				}
			 
			 //输入参数：随路数据字符串、数据分隔符、修改的序号(从0开始)、修改的值，返回值：修改后的整个字符串
			function BaseSetCallData(strCallData,strSplit,nIndex,strNew)
		    {    		
    				var arr=strCallData.split(strSplit);
    				if (nIndex >arr.length)
    					return strCallData;
    				arr.splice(nIndex,1,strNew);
		        return arr.join(strSplit);
				}
       ]]>
       </script> 
</vxml>
